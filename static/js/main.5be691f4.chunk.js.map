{"version":3,"sources":["Zoom.js","App.js","reportWebVitals.js","index.js"],"names":["ZoomMtg","setZoomJSLib","preLoadWasm","prepareWebSDK","i18n","load","reload","Zoom","console","log","params","useParams","room","split","apiKey","meetingNumber","passWord","crypto","require","signature","document","getElementById","style","display","init","leaveUrl","success","join","userName","userEmail","error","startMeeting","apiSecret","role","timestamp","Date","getTime","msg","Buffer","from","toString","hash","createHmac","update","digest","generateSignature","App","className","path","component","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","createBrowserHistory"],"mappings":"+FACA,+CAMAA,UAAQC,aAAa,mCAAoC,OAEzDD,UAAQE,cACRF,UAAQG,gBAERH,UAAQI,KAAKC,KAAK,SAClBL,UAAQI,KAAKE,OAAO,SA6ELC,IA3EF,WAEXC,QAAQC,IAAI,SACZ,IACMC,EADSC,cAATC,KACcC,MAAM,KAGtBC,EAAS,yBACTC,EAAgBL,EAAO,GAKvBM,EAAWN,EAAO,GAEhBO,EAASC,EAAQ,KAyDvB,OAhCA,SAAsBC,GACpBC,SAASC,eAAe,cAAcC,MAAMC,QAAU,QAEtDvB,UAAQwB,KAAK,CACXC,SAlCW,wBAmCXC,QAAS,SAACA,GACRlB,QAAQC,IAAIiB,GAEZ1B,UAAQ2B,KAAK,CACXR,UAAWA,EACXJ,cAAeA,EACfa,SAxCO,QAyCPd,OAAQA,EACRe,UAzCQ,GA0CRb,SAAUA,EACVU,QAAS,SAACA,GACRlB,QAAQC,IAAIiB,IAEdI,MAAO,SAACA,GACNtB,QAAQC,IAAIqB,OAKlBA,MAAO,SAACA,GACNtB,QAAQC,IAAIqB,MA7BdC,CAnBJ,SAA2BjB,EAAQkB,EAAWjB,EAAekB,GAEzD,IAAMC,GAAY,IAAIC,MAAOC,UAAY,IACnCC,EAAMC,EAAOC,KAAKzB,EAASC,EAAgBmB,EAAYD,GAAMO,SACjE,UAEIC,EAAOxB,EACVyB,WAAW,SAAUV,GACrBW,OAAON,GACPO,OAAO,UAKV,OAJkBN,EAAOC,KAAP,UACbzB,EADa,YACHC,EADG,YACcmB,EADd,YAC2BD,EAD3B,YACmCQ,IACnDD,SAAS,UAMKK,CAAkB/B,EA7BtB,uCA6ByCC,EA1B9C,IA+DH,wC,ufCpEK+B,E,4JAbb,WACE,OACA,yBAAKC,UAAU,OAEb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,cAAcC,UAAW1C,Y,GAP1B2C,aCQJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCAdQ,IAASC,OACP,kBAAC,IAAD,CAAQC,sBAAoB,GAC1B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOb,UAAWH,MAGtB1B,SAASC,eAAe,SAM1B8B,M","file":"static/js/main.5be691f4.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { ZoomMtg } from \"@zoomus/websdk\";\r\n\r\n\r\n\r\nZoomMtg.setZoomJSLib('https://source.zoom.us/1.9.9/lib', '/av');\r\n\r\nZoomMtg.preLoadWasm();\r\nZoomMtg.prepareWebSDK();\r\n\r\nZoomMtg.i18n.load('en-US');\r\nZoomMtg.i18n.reload('en-US');\r\n\r\nconst Zoom = () => {\r\n\r\n  console.log(\"hgola\");\r\n  let { room } = useParams();\r\n  const params = room.split(\"-\");\r\n\r\n  var apiSecret = 'dXNpRJHw9Oeme5tqiNEvpBsJ8EfOh0UDBB25'\r\n  var apiKey = 'MVfVOSCEQwGZNKFD2slZ-w'\r\n  var meetingNumber = params[0];\r\n  var role = 0\r\n  var leaveUrl = 'http://localhost:3000'\r\n  var userName = 'React'\r\n  var userEmail = ''\r\n  var passWord = params[1];\r\n\r\n  const crypto = require(\"crypto\"); \r\n\r\n  function generateSignature(apiKey, apiSecret, meetingNumber, role) {\r\n\r\n      const timestamp = new Date().getTime() - 30000;\r\n      const msg = Buffer.from(apiKey + meetingNumber + timestamp + role).toString(\r\n        \"base64\"\r\n      );\r\n      const hash = crypto\r\n        .createHmac(\"sha256\", apiSecret)\r\n        .update(msg)\r\n        .digest(\"base64\");\r\n      const signature = Buffer.from(\r\n        `${apiKey}.${meetingNumber}.${timestamp}.${role}.${hash}`\r\n      ).toString(\"base64\");\r\n  \r\n      return signature    \r\n  }\r\n\r\n  function getSignature(e) {\r\n      let signature = generateSignature(apiKey, apiSecret, meetingNumber, role);\r\n      startMeeting(signature)\r\n  \r\n  }\r\n\r\n  function startMeeting(signature) {\r\n    document.getElementById('zmmtg-root').style.display = 'block'\r\n\r\n    ZoomMtg.init({\r\n      leaveUrl: leaveUrl,\r\n      success: (success) => {\r\n        console.log(success)\r\n\r\n        ZoomMtg.join({\r\n          signature: signature,\r\n          meetingNumber: meetingNumber,\r\n          userName: userName,\r\n          apiKey: apiKey,\r\n          userEmail: userEmail,\r\n          passWord: passWord,          \r\n          success: (success) => {\r\n            console.log(success)\r\n          },\r\n          error: (error) => {\r\n            console.log(error)\r\n          }\r\n        })\r\n\r\n      },\r\n      error: (error) => {\r\n        console.log(error)\r\n      }\r\n    })\r\n  }\r\n  getSignature();\r\n\r\n\r\n  return (<></>);\r\n}\r\n\r\nexport default Zoom;\r\n","import React,{Component} from 'react';\r\nimport {  Route, Switch, Router } from 'react-router-dom';\r\nimport Zoom from './Zoom'\r\n\r\nclass App  extends Component {\r\n\r\n  render() {\r\n    return (\r\n    <div className=\"App\">      \r\n    \r\n      <Switch>\r\n        <Route path=\"/zoom/:room\" component={Zoom}></Route>\r\n      </Switch>\r\n    \r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router createBrowserHistory>\r\n    <Switch>\r\n      <Route component={App} />\r\n    </Switch>\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}